{"name":"Azupload","tagline":"Command-line tool for fast, parallel mass (bulk) blob uploads to your Azure storage","body":"# azupload\r\n\r\n### What is it\r\n\r\nA command-line tool for fast, parallel mass (bulk) uploading blobs to your Azure storage.\r\n\r\n\r\n### Downloads\r\n\r\n * C#\r\n   * [azupload-csharp](http://www.mediafire.com/download/ihtssa9fq575u8w/azupload-csharp-20140829.7z)\r\n   * [Microsoft .NET Framework 4.5](http://www.microsoft.com/en-us/download/details.aspx?id=30653) or [Mono MRE 3.6](http://www.mono-project.com/download/)\r\n * Java\r\n   * [azupload-java](http://www.mediafire.com/download/q2jrn5weoxlf0ys/azupload-java-20140829.7z)\r\n   * [JRE 8](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n\r\n\r\n### Usage\r\n\r\n * C#\r\n   * open *azupload.exe.config* and fix your connection string accordingly\r\n   * `azupload.exe --upload <sourceDir> <azureContainer> [ttlMinutes]`\r\n\r\n * Java\r\n   * open *app.properties* and fix your connection string accordingly\r\n   * `java -jar azupload.jar --upload <threadCount> <sourceDir> <azureContainer> [containerPrefix]`\r\n\r\n**WARNING**: if the files you try to upload already exist in the container, *azupload* WILL overwrite anything without asking, so use carefully!\r\n\r\n\r\n### Building\r\n\r\n * C#\r\n   * [Visual Studio 2013](http://www.visualstudio.com/downloads/download-visual-studio-vs) (you'll need Windows Desktop **and** Web) or [Mono MDK 3.6](http://www.mono-project.com/download/) + [MonoDevelop 5](http://monodevelop.com/Download)\r\n * Java\r\n   * [JDK 8](http://www.oracle.com/technetwork/java/javase/downloads/index.html)\r\n   * [NetBeans 8 Java SE](https://netbeans.org/downloads/index.html) or [Ant](http://ant.apache.org/bindownload.cgi) zip\r\n\r\n\r\n### Differences between the C# and Java versions\r\n\r\n * In the Java version you need to specify the number of uploader threads. The C# version does this automatically.\r\n * In the Java version you can specify a container prefix that is prepended to filenames. This allows you to upload files to subfolders under the container root.\r\n * In the C# version you can specify the TTL for uploaded blobs, i.e. the time it takes for a cache refresh to occur on the CDN nodes.\r\n\r\nOf course these could be eliminated, it just fits our needs the way it is. PRs are welcome.\r\n\r\n\r\n### Speed\r\n\r\nFor my personal tests I've used a folder containing about 3000 files with a total size of about 300 MiB.\r\n\r\n* (unnamed commercial GUI application): 20 minutes\r\n* azupload: 8 minutes\r\n\r\n\r\n### Improvements\r\n\r\n* [How to use Blob Storage from .NET](http://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-how-to-use-blobs/)\r\n* [How to use Blob Storage from Java](http://azure.microsoft.com/en-us/documentation/articles/storage-java-how-to-use-blob-storage/)\r\n\r\n\r\n### Why not PowerShell?\r\n\r\nIn fact the initial version used PowerShell. I came to the following conclusions:\r\n\r\n * It's s-l-o-w.\r\n * It's extremely poorly documented.\r\n * It seems to be impossible to run jobs in parallel properly thanks to *InitializationScript*'s *Import-Module* directive being completely ignored when trying to *Start-Job* and thus rendering Azure commands unavailable to the child jobs.\r\n\r\n\r\n### Does it work on Linux or OS X?\r\n\r\nYes, it does!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}